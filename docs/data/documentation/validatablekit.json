{"hierarchy":{"paths":[[]]},"abstract":[{"text":"Composable data validation API in Swift exposing simple DSL for writing validations.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit"},"kind":"symbol","primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"inlineContent":[{"text":"ValidatableKit","type":"text"}],"type":"strong"},{"type":"text","text":" allows validating data by providing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validator"},{"type":"text","text":" for the type. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validator"},{"type":"text","text":"s can be created by directly providing callback that performs the validation on basic data types and provides "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidatorResult"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let skip: Validator<Int> = .init { _ in ValidatorResults.Skipped() }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Or the library provided DSL can be used to add validations to properties for complex data types:","type":"text"}],"type":"paragraph"},{"code":["struct User: Validatable {","    let name: String","    let email: String","    let age: Int","","    var validator: Validator<Self> {","        return Validator<Self>","            .name(!.isEmpty, .alphanumeric)","            .email(.isEmail)","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/validatablekit"]}],"topicSections":[{"title":"Validation DSL","identifiers":["doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validatable","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validator","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validation","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validations"]},{"title":"Validation Result","identifiers":["doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidatorResult","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidationError","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidatorResults"]},{"title":"Operators","identifiers":["doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/!(_:)","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/&&(_:_:)-14azh","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/&&(_:_:)-2znvr","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/&&(_:_:)-5btfq","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/+(_:_:)","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/__(_:_:)-3f7fq","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/__(_:_:)-3nwfv","doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/__(_:_:)-8ozzh"]}],"sections":[],"metadata":{"title":"ValidatableKit","modules":[{"name":"ValidatableKit"}],"role":"collection","externalID":"ValidatableKit","symbolKind":"module","roleHeading":"Framework"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://ValidatableKit/documentation/ValidatableKit/&&(_:_:)-5btfq":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&&","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>) -> ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"abstract":[{"text":"Combines an optional and non-optional ","type":"text"},{"code":"Validator","type":"codeVoice"},{"text":" using AND logic. The non-optional","type":"text"},{"text":" ","type":"text"},{"text":"validator will simply ignore ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" values, assuming the other ","type":"text"},{"code":"Validator","type":"codeVoice"},{"text":" handles them.","type":"text"}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/&&(_:_:)-5btfq","kind":"symbol","type":"topic","title":"&&(_:_:)","url":"\/documentation\/validatablekit\/&&(_:_:)-5btfq","role":"symbol"},"doc://ValidatableKit/documentation/ValidatableKit/__(_:_:)-8ozzh":{"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/__(_:_:)-8ozzh","title":"||(_:_:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Combines two "},{"type":"codeVoice","code":"Validator"},{"type":"text","text":"s, succeeding if either of the "},{"type":"codeVoice","code":"Validator"},{"type":"text","text":"s does not fail."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"||"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/validatablekit\/__(_:_:)-8ozzh","role":"symbol"},"doc://ValidatableKit/documentation/ValidatableKit/&&(_:_:)-2znvr":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&&","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Combines two ","type":"text"},{"code":"Validator","type":"codeVoice"},{"text":"s using AND logic, succeeding if both ","type":"text"},{"code":"Validator","type":"codeVoice"},{"text":"s succeed without error.","type":"text"}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/&&(_:_:)-2znvr","kind":"symbol","type":"topic","title":"&&(_:_:)","url":"\/documentation\/validatablekit\/&&(_:_:)-2znvr","role":"symbol"},"doc://ValidatableKit/documentation/ValidatableKit/Validatable":{"kind":"symbol","title":"Validatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validatable","kind":"identifier"}],"url":"\/documentation\/validatablekit\/validatable","type":"topic","role":"symbol","navigatorTitle":[{"text":"Validatable","kind":"identifier"}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validatable","abstract":[{"type":"text","text":"A type capable of being validated."}]},"doc://ValidatableKit/documentation/ValidatableKit/+(_:_:)":{"kind":"symbol","url":"\/documentation\/validatablekit\/+(_:_:)","title":"+(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"+","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:10Foundation12CharacterSetV","text":"CharacterSet","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:10Foundation12CharacterSetV","text":"CharacterSet","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Foundation12CharacterSetV","text":"CharacterSet","kind":"typeIdentifier"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Unions two character sets."}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/+(_:_:)"},"doc://ValidatableKit/documentation/ValidatableKit/!(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"!"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/!(_:)","title":"!(_:)","abstract":[{"type":"text","text":"Inverts a validation."}],"url":"\/documentation\/validatablekit\/!(_:)","kind":"symbol","role":"symbol"},"doc://ValidatableKit/documentation/ValidatableKit/ValidationError":{"url":"\/documentation\/validatablekit\/validationerror","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidationError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidationError","kind":"identifier"}],"navigatorTitle":[{"text":"ValidationError","kind":"identifier"}],"title":"ValidationError","role":"symbol","kind":"symbol","abstract":[{"text":"An error type representing validation failure.","type":"text"}],"type":"topic"},"doc://ValidatableKit/documentation/ValidatableKit":{"url":"\/documentation\/validatablekit","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit","role":"collection","abstract":[{"text":"Composable data validation API in Swift exposing simple DSL for writing validations.","type":"text"}],"title":"ValidatableKit","type":"topic","kind":"symbol"},"doc://ValidatableKit/documentation/ValidatableKit/ValidatorResult":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValidatorResult"}],"abstract":[{"type":"text","text":"A type representing result of validations"},{"text":" ","type":"text"},{"text":"performed by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validator","type":"reference"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ValidatorResult"}],"kind":"symbol","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidatorResult","role":"symbol","type":"topic","title":"ValidatorResult","url":"\/documentation\/validatablekit\/validatorresult"},"doc://ValidatableKit/documentation/ValidatableKit/__(_:_:)-3f7fq":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"||","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/__(_:_:)-3f7fq","title":"||(_:_:)","abstract":[{"type":"text","text":"Combines an optional and non-optional "},{"code":"Validator","type":"codeVoice"},{"type":"text","text":" using OR logic. The non-optional"},{"type":"text","text":" "},{"type":"text","text":"validator will simply ignore "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" values, assuming the other "},{"code":"Validator","type":"codeVoice"},{"text":" handles them.","type":"text"}],"url":"\/documentation\/validatablekit\/__(_:_:)-3f7fq","kind":"symbol","role":"symbol"},"doc://ValidatableKit/documentation/ValidatableKit/Validator":{"abstract":[{"text":"Validates data of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" specialized with.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validator","title":"Validator","kind":"symbol","type":"topic","navigatorTitle":[{"text":"Validator","kind":"identifier"}],"url":"\/documentation\/validatablekit\/validator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validator","kind":"identifier"}]},"doc://ValidatableKit/documentation/ValidatableKit/Validation":{"kind":"symbol","title":"Validation","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validation","kind":"identifier"}],"url":"\/documentation\/validatablekit\/validation","type":"topic","role":"symbol","navigatorTitle":[{"text":"Validation","kind":"identifier"}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validation","abstract":[{"type":"text","text":"Adds "},{"type":"reference","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validator","isActive":true},{"type":"text","text":"s for property type "},{"type":"codeVoice","code":"U"},{"type":"text","text":" of parent type "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}]},"doc://ValidatableKit/documentation/ValidatableKit/&&(_:_:)-14azh":{"role":"symbol","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/&&(_:_:)-14azh","type":"topic","url":"\/documentation\/validatablekit\/&&(_:_:)-14azh","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&&","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Validator","preciseIdentifier":"s:14ValidatableKit9ValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"title":"&&(_:_:)","abstract":[{"text":"Combines an optional and non-optional ","type":"text"},{"type":"codeVoice","code":"Validator"},{"text":" using AND logic. The non-optional","type":"text"},{"text":" ","type":"text"},{"text":"validator will simply ignore ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" values, assuming the other ","type":"text"},{"type":"codeVoice","code":"Validator"},{"text":" handles them.","type":"text"}],"kind":"symbol"},"doc://ValidatableKit/documentation/ValidatableKit/Validations":{"kind":"symbol","title":"Validations","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validations","kind":"identifier"}],"url":"\/documentation\/validatablekit\/validations","type":"topic","role":"symbol","navigatorTitle":[{"text":"Validations","kind":"identifier"}],"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/Validations","abstract":[{"type":"text","text":"Stores property validations of data type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" specialized with."}]},"doc://ValidatableKit/documentation/ValidatableKit/ValidatorResults":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValidatorResults"}],"abstract":[{"type":"text","text":"A name space type containing all default"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidatorResult","type":"reference"},{"text":" provided by this library.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ValidatorResults"}],"kind":"symbol","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/ValidatorResults","role":"symbol","type":"topic","title":"ValidatorResults","url":"\/documentation\/validatablekit\/validatorresults"},"doc://ValidatableKit/documentation/ValidatableKit/__(_:_:)-3nwfv":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"||"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:14ValidatableKit9ValidatorV","text":"Validator"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ValidatableKit9ValidatorV","text":"Validator"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ValidatableKit9ValidatorV","text":"Validator"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>"}],"kind":"symbol","identifier":"doc:\/\/ValidatableKit\/documentation\/ValidatableKit\/__(_:_:)-3nwfv","title":"||(_:_:)","url":"\/documentation\/validatablekit\/__(_:_:)-3nwfv","type":"topic","abstract":[{"type":"text","text":"Combines an optional and non-optional "},{"code":"Validator","type":"codeVoice"},{"text":" using OR logic. The non-optional","type":"text"},{"text":" ","type":"text"},{"text":"validator will simply ignore ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" values, assuming the other ","type":"text"},{"code":"Validator","type":"codeVoice"},{"text":" handles them.","type":"text"}],"role":"symbol"}}}